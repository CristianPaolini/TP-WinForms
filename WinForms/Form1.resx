<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="pbArticulo.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pbArticulo.ErrorImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAPY6AQD2OgEAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAQAAAAEAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAABAAAABAAAAAQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAA
        AB0AAABaAAAAWgAAAB0AAAAAAAAAAQAAAAEAAAAAAAAAHQAAAFoAAABaAAAAHQAAAAAAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAQAAAAAAAAAVgAAAP8AAAD/AAAAVgAAAAAAAAAEAAAABAAAAAAAAABWAAAA/wAAAP8AAABWAAAAAAAA
        AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAABAAAAAAAAABUAAAA/wAAAP8AAABUAAAAAAAAAAQAAAAEAAAAAAAAAFQAAAD/AAAA/wAA
        AFQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAEAAAABAAAAAQAAAAAAAAAFAAAAAAAAAFYAAAD/AAAA/wAAAFYAAAAAAAAABQAAAAUAAAAAAAAAVgAA
        AP8AAAD/AAAAVgAAAAAAAAAFAAAAAAAAAAEAAAABAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAVQAAAP8AAAD/AAAAVQAAAAAAAAAEAAAABAAA
        AAAAAABVAAAA/wAAAP8AAABVAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAEAAAAQAAAAEwAAAAsAAAAAAAAAFAAAAAMAAABhAAAA/wAAAP8AAABhAAAAAgAA
        ABUAAAAVAAAAAgAAAGEAAAD/AAAA/wAAAGEAAAADAAAAFAAAAAAAAAALAAAAEwAAABAAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAEAAAAAAAAAEAAAANoAAAD/AAAAmQAAAAIAAADhAAAA8QAAAPEAAAD8AAAA/AAA
        APAAAADpAAAA6gAAAOoAAADpAAAA8AAAAPwAAAD8AAAA8QAAAPEAAADhAAAAAgAAAJkAAAD/AAAA2gAA
        ABAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAARAAAA6gAAAP8AAACkAAAAAgAAAPEAAAD/AAAA/gAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD+AAAA/wAAAPEAAAACAAAApAAA
        AP8AAADqAAAAEQAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAABEAAADpAAAA/wAAAKMAAAACAAAA7wAA
        AP8AAADgAAAApAAAAKsAAACpAAAAqAAAAKgAAACoAAAAqAAAAKkAAACrAAAApAAAAOAAAAD/AAAA7wAA
        AAIAAACjAAAA/wAAAOkAAAARAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAEQAAAOoAAAD/AAAApAAA
        AAIAAADtAAAA/wAAAKgAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAqAAA
        AP8AAADtAAAAAgAAAKQAAAD/AAAA6gAAABEAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAARAAAA6gAA
        AP8AAACkAAAAAgAAAO0AAAD/AAAAqQAAAAAAAAAHAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAABwAA
        AAAAAACpAAAA/wAAAO0AAAACAAAApAAAAP8AAADqAAAAEQAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAA
        ABEAAADqAAAA/wAAAKQAAAACAAAA7QAAAP8AAACoAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAADAAAAAAAAAKgAAAD/AAAA7QAAAAIAAACkAAAA/wAAAOoAAAARAAAAAAAAAAEAAAAAAAAAAAAA
        AAEAAAAAAAAAEQAAAOoAAAD/AAAApAAAAAIAAADtAAAA/wAAAKgAAAAAAAAAAwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAMAAAAAAAAAqAAAAP8AAADtAAAAAgAAAKQAAAD/AAAA6gAAABEAAAAAAAAAAQAA
        AAAAAAAAAAAAAQAAAAAAAAARAAAA6gAAAP8AAACkAAAAAgAAAO0AAAD/AAAAqAAAAAAAAAADAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAACoAAAA/wAAAO0AAAACAAAApAAAAP8AAADqAAAAEQAA
        AAAAAAABAAAAAAAAAAAAAAABAAAAAAAAABEAAADnAAAA/wAAAKEAAAACAAAA7QAAAP8AAACoAAAAAAAA
        AAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAKgAAAD/AAAA7QAAAAIAAAChAAAA/wAA
        AOcAAAARAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAEQAAAOoAAAD/AAAApAAAAAIAAADtAAAA/wAA
        AKgAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAqAAAAP8AAADtAAAAAgAA
        AKQAAAD/AAAA6gAAABEAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAMAAAAnAAAALgAAABrAAAABwAA
        AOwAAAD/AAAAqQAAAAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAACpAAAA/wAA
        AOwAAAAHAAAAawAAALgAAACcAAAADAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
        AAAAAAAKAAAA4QAAAP8AAAC6AAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAA
        ALoAAAD/AAAA4AAAAAoAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAMAAAAEAAAABAAAAAAAAADAAAAA/wAAAOkAAAAVAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
        AAAAAAAVAAAA6QAAAP8AAADAAAAAAAAAAAQAAAAEAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAHcAAAD/AAAA/wAAAH8AAAAAAAAABgAAAAMAAAABAAAAAQAA
        AAMAAAAGAAAAAAAAAH8AAAD/AAAA/wAAAHcAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAFwAAAOgAAAD/AAAA/AAAAFoAAAAAAAAAAgAA
        AAAAAAAAAAAAAgAAAAAAAABaAAAA/AAAAP8AAADoAAAAFwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAWAAAAP8AAAD9AAAA/gAA
        AKIAAAA5AAAAFQAAABUAAAA5AAAAogAAAP4AAAD9AAAA/wAAAFgAAAAAAAAAAwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAfAAAA8QAA
        AP8AAAD9AAAA/wAAAP4AAADuAAAA7gAAAP4AAAD/AAAA/QAAAP8AAADxAAAAHwAAAAAAAAACAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAgAA
        AL8AAAD/AAAA+gAAAOUAAAD9AAAA/wAAAP8AAAD/AAAA/wAAAP0AAADlAAAA+gAAAP8AAADAAAAAAgAA
        AAEAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAA
        AAAAAACIAAAA/wAAAP8AAADBAAAABwAAAEAAAACEAAAAogAAAKIAAACFAAAAQgAAAAcAAAC+AAAA/wAA
        AP8AAACIAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAMAAAAAAAAAVAAAAP8AAAD/AAAA6wAAACIAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAA
        ACEAAADpAAAA/wAAAP8AAABUAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAADDAAAA/wAAAP8AAABRAAAAAAAAAAQAAAADAAAABAAAAAQAAAAEAAAABAAA
        AAMAAAAEAAAAAAAAAFAAAAD/AAAA/wAAAMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAA4AAAC+AAAAkAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAJAAAAC/AAAADgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAHAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAgAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAgAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/0JC////////QkL//0JC//9CQv+gQkIF/0JC/6AAAAWgAAAFoAAABaAA
        AAWgE8gFoBAIBaAQCAWgE8gFoBPIBaATyAWgE8gFoBPIBfoRiF+hClCF4QgQh/kEIJ/8gAE/+oABX/gA
        AB/5AACf8gmQT/IQCE/6KlRP/Qfgv/oX6F8=
</value>
  </data>
</root>